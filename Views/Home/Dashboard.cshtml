@{
    ViewData["Title"] = "Dashboard";
}

<div class="col-12">
    @if (User.IsInRole("Admin"))
    {
        <div class="row">
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon bg-info elevation-1"><i class="fas fa-cog"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Company</span>
                        <span class="info-box-number">
                            10
                            <small>%</small>
                        </span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box mb-3">
                    <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-thumbs-up"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Likes</span>
                        <span class="info-box-number">41,410</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->

            <!-- fix for small devices only -->
            <div class="clearfix hidden-md-up"></div>

            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box mb-3">
                    <span class="info-box-icon bg-success elevation-1"><i class="fas fa-shopping-cart"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Sales</span>
                        <span class="info-box-number">760</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box mb-3">
                    <span class="info-box-icon bg-warning elevation-1"><i class="fas fa-users"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Employee</span>
                        <span class="info-box-number">2,000</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
        </div>
    }

    @if (User.IsInRole("User"))
    {
        <div class="row">
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3 id="count-remaining-leave">0</h3>
                        <p>Remaining Leave</p>
                    </div>
                    <div class="icon">
                        <i class="fas fa-clipboard-list"></i>
                    </div>
                    <a href="@Url.Action("Index", "LeaveRequest")" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <!-- ./col -->
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-danger">
                    <div class="inner">
                        <h3 id="count-medical-claim">0</h3>
                        <p>@Resource.MedicalClaimMenu</p>
                    </div>
                    <div class="icon">
                        <i class="bi bi-hospital"></i>
                    </div>
                    <a href="@Url.Action("Index", "Outpatient")" class="small-box-footer">
                        More info <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <!-- ./col -->
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-purple">
                    <div class="inner">
                        <h3 id="count-business-trip">0</h3>
                        <p>@Resource.BusinessTravelRequest</p>
                    </div>
                    <div class="icon">
                        <i class="fas fa-plane-departure"></i>
                    </div>
                    <a href="@Url.Action("Index", "BusinessTravelRequest")" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <!-- ./col -->
            <div class="col-lg-3 col-6">
                <!-- small box -->
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3 id="totalAllowance">0</h3>
                        <p>@Resource.AllowanceTotal</p>
                    </div>
                    <div class="icon">
                        <i class="bi bi-cash-coin"></i>
                    </div>
                    <a href="@Url.Action("Index", "Attendance")" class="small-box-footer">More info <i
                            class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <!-- ./col -->
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card card-info">
                    <div class="card-header">
                        <h3 class="card-title">@Resource.AttendanceMenu</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart">
                            <canvas id="attendancePeriod" style="height: 50vh; max-height: 40vh;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card card-info">
                    <div class="card-header">
                        <h3 class="card-title">@Resource.Allowance</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart">
                            <canvas id="allowancePeriod" style="height: 50vh; max-height: 40vh;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@section Scripts {
    <script>

        // Fetch Attendance Data and Create Chart
        function fetchAttendanceData(selectedYearPeriod) {
            $.ajax({
                url: '@Url.Action("AttendanceData", "DashboardApi")',
                type: 'GET',
                dataType: 'json',
                data: {yearPeriod: selectedYearPeriod},
                beforeSend: function () {
                    Swal.fire({
                        title: 'Loading...',
                        html: '<strong>Loading data, please wait!</strong>',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                },
                complete: function () {
                    Swal.close();
                },
                success: function (attendanceData) {
                    const labels = attendanceData.map(item => item.period);
                    const data = attendanceData.map(item => item.entered);
                    
                    destroyChart('attendancePeriod');

                    const ctx1 = document.getElementById('attendancePeriod').getContext('2d');
                    new Chart(ctx1, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Jumlah Kehadiran',
                                data: data,
                                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {beginAtZero: true}
                            }
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching attendance data:', error);
                }
            });
        }

        // Fetch Allowance Data and Create Chart
        function fetchAllowanceData(selectedYearPeriod) {
            $.ajax({
                url: '@Url.Action("AllowanceData", "DashboardApi")',
                type: 'GET',
                dataType: 'json',
                data: {yearPeriod: selectedYearPeriod},
                beforeSend: function () {
                    Swal.fire({
                        title: 'Loading...',
                        html: '<strong>Loading data, please wait!</strong>',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                },
                complete: function () {
                    Swal.close();
                },
                success: function (allowanceData) {
                    // total allowance
                    const totalAllowance = allowanceData.reduce((total, item) => total + item.totalMealAllowance, 0);
                    $('#totalAllowance').text(totalAllowance.toLocaleString());

                    const labels = allowanceData.map(item => item.period);
                    const data = allowanceData.map(item => item.totalMealAllowance);
                    destroyChart('allowancePeriod');
                    const ctx2 = document.getElementById('allowancePeriod').getContext('2d');
                    new Chart(ctx2, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Jumlah Tunjangan',
                                data: data,
                                backgroundColor: 'rgba(231, 76, 60, 0.7)',
                                borderColor: 'rgba(231, 76, 60, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {beginAtZero: true}
                            }
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching allowance data:', error);
                }
            });
        }

        function fetchLeaveRequestData(selectedYearPeriod) {
            $.ajax({
                url: '@Url.Action("LeaveRequestData", "DashboardApi")',
                type: 'GET',
                dataType: 'json',
                data: {yearPeriod: selectedYearPeriod},
                beforeSend: function () {
                    Swal.fire({
                        title: 'Loading...',
                        html: '<strong>Loading data, please wait!</strong>',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                },
                complete: function () {
                    Swal.close();
                },
                success: function (leaveRequestData) {
                    const remainingLeave = leaveRequestData.reduce((total, item) => total + item.timeOff, 0);
                    $('#count-remaining-leave').text(remainingLeave);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching leave request data:', error);
                }
            });
        }

        function fetchMedicalClaim(selectedYearPeriod) {
            $.ajax({
                url: '@Url.Action("MedicalClaimData", "DashboardApi")',
                type: 'GET',
                dataType: 'json',
                data: {yearPeriod: selectedYearPeriod},
                beforeSend: function () {
                    Swal.fire({
                        title: 'Loading...',
                        html: '<strong>Loading data, please wait!</strong>',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                },
                complete: function () {
                    Swal.close();
                },
                success: function (medicalClaimData) {
                    const totalMedicalClaim = medicalClaimData.reduce((total, item) => total + item.claim, 0);
                    console.log(totalMedicalClaim);
                    $('#count-medical-claim').text(totalMedicalClaim);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching medical claim data:', error);
                }
            });
        }

        function fetchYearPeriods() {
            $.ajax({
                url: '@Url.Action("YearPeriods", "DashboardApi")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    const yearPeriodDropdown = $('#year-period-dropdown');
                    yearPeriodDropdown.empty();

                    if (response.periods && response.periods.length > 0) {
                        response.periods.forEach(period => {
                            const startDate = new Date(period.startPeriod).toLocaleDateString('en-GB', {
                                day: '2-digit',
                                month: 'short',
                                year: 'numeric'
                            });
                            const endDate = new Date(period.endPeriod).toLocaleDateString('en-GB', {
                                day: '2-digit',
                                month: 'short',
                                year: 'numeric'
                            });

                            const isSelected = period.isActive === 1 ? 'selected' : '';
                            const option = `<option value="${period.year}" ${isSelected}>${startDate} - ${endDate}</option>`;
                            yearPeriodDropdown.append(option);
                        });
                    } else {
                        yearPeriodDropdown.append('<option>No periods available</option>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching year periods:', error);
                }
            });
        }

        function reloadAllData(selectedYearPeriod) {
            fetchAttendanceData(selectedYearPeriod);
            fetchAllowanceData(selectedYearPeriod);
            fetchMedicalClaim(selectedYearPeriod);
            fetchLeaveRequestData(selectedYearPeriod);
        }

        function destroyChart(chartId) {
            const canvas = document.getElementById(chartId);
            if (canvas) {
                const chartInstance = Chart.getChart(chartId);
                if (chartInstance) {
                    chartInstance.destroy();
                }
            }
        }

        $("#filter-year").click(function () {
            const selectedYearPeriod = $('#year-period-dropdown').val();
            reloadAllData(selectedYearPeriod);
        });

        $(document).ready(function () {
            fetchYearPeriods();
            const currentYear = new Date().getFullYear();
            reloadAllData(currentYear);
        });
    </script>
}



